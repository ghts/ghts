package xing

import (
	"github.com/ghts/ghts/lib"
	"github.com/ghts/ghts/xing/base"

	"testing"
	"time"
)

func TestT1102_현물_시세_조회(t *testing.T) {
	t.Parallel()

	if lib.F지금().Hour() >= 5 && lib.F지금().Hour() < 9 {
		t.SkipNow() // 이 시간대에 테스트 에러가 발생함.
	}

	const 종목코드 = "069500" // KODEX 200
	당일 := F당일()
	개장_시간 := time.Date(당일.Year(), 당일.Month(), 당일.Day(), 8, 0, 0, 0, 당일.Location())

	값, 에러 := TrT1102_현물_시세_조회(종목코드)
	lib.F테스트_에러없음(t, 에러)

	switch 값.M전일대비구분 { // 등락율 확인
	case xt.P구분_상한, xt.P구분_상승:
		lib.F테스트_참임(t, 값.M등락율 >= 0)
	case xt.P구분_하한, xt.P구분_하락:
		lib.F테스트_참임(t, 값.M등락율 <= 0)
	case xt.P구분_보합:
		lib.F테스트_같음(t, 값.M등락율, 0)
	}

	lib.F테스트_참임(t, 값.M거래량 >= 0)
	lib.F테스트_참임(t, 값.M가중평균 > 값.M하한가 || 값.M가중평균 == 0, 값.M가중평균, 값.M하한가) // 가중평균 = 누적거래대금 / 누적거래량
	lib.F테스트_참임(t, 값.M가중평균 < 값.M상한가 || 값.M가중평균 == 0, 값.M가중평균, 값.M상한가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M현재가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M하한가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M시가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M고가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M저가)
	lib.F테스트_참임(t, 값.M52주_최고가 >= 값.M기준가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M현재가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M하한가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M시가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M고가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M저가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M기준가)
	lib.F테스트_참임(t, 값.M상한가 >= 값.M52주_최저가)
	lib.F테스트_참임(t, 값.M하한가 <= 값.M현재가)
	lib.F테스트_참임(t, 값.M하한가 <= 값.M시가, 값.M종목코드, 값.M하한가, 값.M시가, 값.M종목코드)
	lib.F테스트_참임(t, 값.M하한가 <= 값.M고가)
	lib.F테스트_참임(t, 값.M하한가 <= 값.M저가)
	lib.F테스트_참임(t, 값.M하한가 <= 값.M기준가)
	lib.F테스트_참임(t, 값.M고가 >= 값.M현재가)
	lib.F테스트_참임(t, 값.M고가 >= 값.M시가)
	lib.F테스트_참임(t, 값.M고가 >= 값.M저가)
	lib.F테스트_참임(t, 값.M고가 >= 값.M52주_최저가)
	lib.F테스트_참임(t, 값.M저가 <= 값.M현재가)
	lib.F테스트_참임(t, 값.M저가 >= 값.M52주_최저가)
	lib.F테스트_참임(t, 값.M52주_최저가 > 0)
	lib.F테스트_참임(t, 값.M전일거래량 >= 0)
	lib.F테스트_같음(t, 값.M거래량차, lib.F절대값(값.M전일거래량-값.M거래량))
	lib.F테스트_참임(t, 값.M시가시간.After(개장_시간.Add(-1*lib.P10분)), 값.M시가시간, 개장_시간.Add(-1*lib.P10분))
	lib.F테스트_참임(t, 값.M시가시간.Before(당일.Add(lib.P1일)), 값.M시가시간, 당일.Add(lib.P1일))
	lib.F테스트_참임(t, 값.M고가시간.After(개장_시간.Add(-1*lib.P10분)))
	lib.F테스트_참임(t, 값.M고가시간.Before(당일.Add(lib.P1일)))
	lib.F테스트_참임(t, 값.M고가시간.After(값.M시가시간) || 값.M고가시간.Equal(값.M시가시간))
	lib.F테스트_참임(t, 값.M저가시간.After(개장_시간.Add(-1*lib.P10분)))
	lib.F테스트_참임(t, 값.M저가시간.Before(당일.Add(lib.P1일)))
	lib.F테스트_참임(t, 값.M저가시간.After(값.M시가시간) || 값.M저가시간.Equal(값.M시가시간))
	lib.F테스트_참임(t, 값.M52주_최고가일.After(당일.Add(-380*lib.P1일)))
	lib.F테스트_참임(t, 값.M52주_최고가일.Before(당일.Add(lib.P1일)))
	lib.F테스트_참임(t, 값.M52주_최저가일.After(당일.Add(-380*lib.P1일)), 값.M52주_최저가일, 당일.Add(-62*lib.P1일))
	lib.F테스트_참임(t, 값.M52주_최저가일.Before(당일.Add(lib.P1일)))
	lib.F테스트_참임(t, 값.M소진율 >= 0.0 && 값.M소진율 <= 100.0, 값.M소진율)
	//lib.F문자열_출력("값.PER : %v", 값.PER)
	//lib.F문자열_출력("값.PBR : %v", 값.PBR)
	lib.F테스트_참임(t, 값.M상장주식수_천 > 0, 값.M상장주식수_천)
	lib.F테스트_참임(t, 값.M증거금율 >= 0 && 값.M증거금율 <= 100, 값.M증거금율)
	lib.F테스트_같음(t, 값.M수량단위, 1) // 단주 거래 전면 허용되었다고 하던 데.
	lib.F테스트_참임(t, 값.M회전율 >= 0, 값.M회전율)
	lib.F테스트_같음(t, len(값.M종목코드), 6)
	lib.F테스트_참임(t, 값.M거래대금_백만 >= 0, 값.M거래대금_백만)
	lib.F테스트_참임(t, 값.M전일동시간거래량 >= 0, 값.M전일동시간거래량)
	lib.F테스트_참임(t, 값.M연중_최고가 > 0)
	lib.F테스트_같음(t, 값.M연중_최고가_일자.Year(), time.Now().Year(), time.Now().Year()-1)
	lib.F테스트_참임(t, 값.M연중_최저가 > 0)
	lib.F테스트_같음(t, 값.M연중_최저가_일자.Year(), time.Now().Year(), time.Now().Year()-1)
	lib.F테스트_참임(t, 값.M목표가 >= 0, 값.M목표가)

	if ETF_ETN_종목_여부(값.M종목코드) {
		lib.F테스트_같음(t, 값.M자본금_억, 0)
		lib.F테스트_같음(t, 값.M액면가, 0)
		lib.F테스트_같음(t, 값.M전분기_매출액_억, 0)
		lib.F테스트_같음(t, 값.M전전분기_매출액, 0)
		lib.F테스트_같음(t, 값.M전년대비_매출액_증감율, 0)
		//lib.F테스트_같음(t, 값.M발행가격, 0)
		lib.F테스트_같음(t, 값.M결산월, 0)
	} else {
		lib.F테스트_참임(t, 값.M자본금_억 >= 0, 값.M종목코드, 값.M자본금_억)
		lib.F테스트_참임(t, 값.M액면가 >= 0, 값.M종목코드, 값.M액면가) // 완리 (900180)는 액면가 0임
		lib.F테스트_참임(t, 값.M전분기_매출액_억 >= 0)            // '동북아 12호(083370)'의 경우 대여업만 하므로 (판매) 매출액 0임.
		lib.F테스트_참임(t, 값.M전전분기_매출액 >= 0)
		//lib.F테스트_참임(t, 값.M전년대비_매출액_증감율 > 0)
		//lib.F테스트_참임(t, 값.M발행가격 >= 0, 종목코드, 값.M발행가격)   // 발행가격이 0인 종목이 존재함. 이해불가.

		lib.F중복없는_문자열_출력("t1305 결산월 관련 테스트 보류")
		//lib.F테스트_같음(t, 값.M결산월, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
	}

	lib.F테스트_참임(t, 값.M유동주식수_천 > 0)

	오차 := lib.F절대값((float64(값.M대용가) - float64(값.M기준가)*float64(값.M증거금율)/100) / float64(값.M대용가))
	lib.F테스트_참임(t, 오차 < 3, "오차:%v, 기준가:%v, 증거금율:%v, 대용가:%v", 오차, 값.M기준가, 값.M증거금율, 값.M대용가)

	시가총액 := 값.M시가총액_억 * 100000000
	상장주식수 := 값.M상장주식수_천 * 1000
	오차율 := lib.F절대값((시가총액-값.M현재가*상장주식수)/시가총액) / 100
	lib.F테스트_참임(t, 오차율 < 10, 오차율)
	lib.F테스트_참임(t, 값.M상장일.After(time.Time{})) // 1900-01-01 이후
	lib.F테스트_참임(t, 값.M전분기명 == "" ||
		lib.F정규식_검색(값.M전분기명, []string{"[0-9]+ [1-4]분기"}) != "" ||
		lib.F정규식_검색(값.M전분기명, []string{"[0-9]+ 결산"}) != "", 값.M전분기명)

	//lib.F테스트_참임(t, 값.M전분기_영업이익_억 ???)
	//lib.F테스트_참임(t, 값.M전분기_경상이익_억 ???)
	//lib.F테스트_참임(t, 값.M전분기_순이익_억 ???)
	lib.F테스트_참임(t, float64(값.M전분기_순이익_억)*값.M전분기EPS >= 0, 값.M전분기_순이익_억, 값.M전분기EPS)
	lib.F테스트_참임(t, 값.M전전분기명 == "" ||
		lib.F정규식_검색(값.M전전분기명, []string{"[0-9]+ [1-4]분기"}) != "", 값.M전전분기명) // "[0-9]+ 결산"

	//lib.F테스트_참임(t, 값.M전전분기_영업이익 ???)
	//lib.F테스트_참임(t, 값.M전전분기_경상이익 ???)
	//lib.F테스트_참임(t, 값.M전전분기_순이익 ???)
	lib.F테스트_참임(t, float64(값.M전전분기_순이익)*값.M전전분기EPS >= 0, 값.M전전분기_순이익, 값.M전전분기EPS)

	//lib.F테스트_참임(t, 값.M전년대비_영업이익_증감율 ???)
	//lib.F테스트_참임(t, 값.M전년대비_경상이익_증감율 ???)
	//lib.F테스트_참임(t, 값.M전년대비_순이익_증감율 ???)

	// 주식소각, 주식분할등 주식수량에 변동이 있는 경우, EPS와 순이익의 방향성이 다를 수 있다.
	//lib.F테스트_참임(t, float64(값.M전년대비_순이익_증감율) * 값.M전년대비_EPS_증감율 >= 0, 종목코드, 값.M전년대비_순이익_증감율, 값.M전년대비_EPS_증감율)

	lib.F테스트_같음(t, 값.M락구분, "", "권배락", "권리락", "배당락", "액면분할", "액면병합", "주식병합", "기업분할", "감자")
	lib.F테스트_같음(t, 값.M관리_급등구분, "", "관리/경고", "관리/위험", "관리", "예고", "경고", "위험")
	lib.F테스트_같음(t, 값.M정지_연장구분, "", "거래정지", "거래중단", "시가연장", "종가연장")
	//lib.F변수값_확인(값.M투자_불성실구분) // ??
	lib.F테스트_같음(t, 값.M시장구분, lib.P시장구분_전체, lib.P시장구분_코스피, lib.P시장구분_코스닥)
	//lib.F변수값_확인(값.T_PER) // ??
	lib.F테스트_같음(t, 값.M통화ISO코드, "KRW")

	if 값.M투자주의환기 != "" {
		lib.F체크포인트(값.M투자주의환기)
	}

	//lib.F변수값_확인(값.M기업인수목적회사여부) // ??
	//lib.F변수값_확인(값.M배분적용구분코드)   // ??
	//lib.F변수값_확인(값.M배분적용구분)     // ??

	if 값.M단기과열_VI발동 != "" {
		lib.F체크포인트(값.M단기과열_VI발동)
	}

	예상_M정적VI상한가 := int64(float64(값.M현재가) * 1.1)
	lib.F테스트_참임(t, lib.F오차율_퍼센트(값.M정적VI상한가, 예상_M정적VI상한가) < 10 ||
		lib.F오차(값.M정적VI상한가, 예상_M정적VI상한가) < 50,
		값.M정적VI상한가, 예상_M정적VI상한가, lib.F오차율_퍼센트(값.M정적VI상한가, 예상_M정적VI상한가))

	예상_M정적VI하한가 := int64(float64(값.M현재가) * 0.9)
	lib.F테스트_참임(t, lib.F오차율_퍼센트(값.M정적VI하한가, 예상_M정적VI하한가) < 10 ||
		lib.F오차(값.M정적VI하한가, 예상_M정적VI하한가) < 50,
		값.M정적VI하한가, 예상_M정적VI하한가, lib.F오차율_퍼센트(값.M정적VI하한가, 예상_M정적VI하한가))

	lib.F테스트_같음(t, len(값.M매도_거래원_정보_모음), 5)
	lib.F테스트_같음(t, len(값.M매수_거래원_정보_모음), 5)

	for _, 매도_거래원_정보 := range 값.M매도_거래원_정보_모음 {
		lib.F테스트_참임(t, 매도_거래원_정보.M증권사_코드 != "")
		lib.F테스트_참임(t, 매도_거래원_정보.M이름 != "")
		lib.F테스트_참임(t, 매도_거래원_정보.M거래_수량 >= 0)
		lib.F테스트_참임(t, 매도_거래원_정보.M평균_단가 >= 0)
		lib.F테스트_참임(t, 매도_거래원_정보.M거래_대금 >= 0)
		//lib.F테스트_참임(t, 매도_거래원_정보.M전일대비_증감 ??)
		lib.F테스트_참임(t, 매도_거래원_정보.M비율 >= 0)
	}

	for _, 매수_거래원_정보 := range 값.M매수_거래원_정보_모음 {
		lib.F테스트_참임(t, 매수_거래원_정보.M증권사_코드 != "")
		lib.F테스트_참임(t, 매수_거래원_정보.M이름 != "")
		lib.F테스트_참임(t, 매수_거래원_정보.M거래_수량 >= 0)
		lib.F테스트_참임(t, 매수_거래원_정보.M평균_단가 >= 0)
		lib.F테스트_참임(t, 매수_거래원_정보.M거래_대금 >= 0)
		//lib.F테스트_참임(t, 매수_거래원_정보.M전일대비_증감 ??)
		lib.F테스트_참임(t, 매수_거래원_정보.M비율 >= 0)
	}

	lib.F테스트_참임(t, 값.M외국계_매도_거래원_정보.M거래_수량 >= 0)
	lib.F테스트_참임(t, 값.M외국계_매도_거래원_정보.M평균_단가 >= 0)
	lib.F테스트_참임(t, 값.M외국계_매도_거래원_정보.M거래_대금 >= 0)
	//lib.F테스트_참임(t, 값.M외국계_매도_거래원_정보.M전일대비_증감 ??)
	lib.F테스트_참임(t, 값.M외국계_매도_거래원_정보.M비율 >= 0)

	lib.F테스트_참임(t, 값.M외국계_매수_거래원_정보.M거래_수량 >= 0)
	lib.F테스트_참임(t, 값.M외국계_매수_거래원_정보.M평균_단가 >= 0)
	lib.F테스트_참임(t, 값.M외국계_매수_거래원_정보.M거래_대금 >= 0)
	//lib.F테스트_참임(t, 값.M외국계_매수_거래원_정보.M전일대비_증감 ??)
	lib.F테스트_참임(t, 값.M외국계_매수_거래원_정보.M비율 >= 0)

	if 값.NXT장구분 != "" {
		lib.F체크포인트(값.NXT장구분)
	}

	if 값.NXT단기과열_VI발동 != "" {
		lib.F체크포인트(값.NXT단기과열_VI발동)
	}

	lib.F테스트_참임(t, lib.F오차율_퍼센트(값.NXT정적VI상한가, 예상_M정적VI상한가) < 10 ||
		lib.F오차(값.M정적VI상한가, 예상_M정적VI상한가) < 50 ||
		값.NXT정적VI상한가 == 0,
		값.NXT정적VI상한가, 예상_M정적VI상한가, lib.F오차율_퍼센트(값.NXT정적VI상한가, 예상_M정적VI상한가))

	lib.F테스트_참임(t, lib.F오차율_퍼센트(값.NXT정적VI하한가, 예상_M정적VI하한가) < 10 ||
		lib.F오차(값.M정적VI하한가, 예상_M정적VI하한가) < 50 ||
		값.NXT정적VI하한가 == 0,
		값.NXT정적VI상한가, 예상_M정적VI하한가)

	lib.F테스트_같음(t, len(값.M거래소별단축코드), 6, 7)

	if len(값.M거래소별단축코드) == 7 {
		lib.F테스트_같음(t, 값.M거래소별단축코드[0], "N", "U")
	}
}
