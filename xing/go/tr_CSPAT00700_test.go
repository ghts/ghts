package xing

import (
	lb "github.com/ghts/ghts/lib"
	mt "github.com/ghts/ghts/lib/market_time"
	"github.com/ghts/ghts/lib/nanomsg"
	"github.com/ghts/ghts/xing/base"
	"testing"
	"time"
)

func TestCSPAT00700_현물_정정_주문_질의값(t *testing.T) {
	t.Parallel()

	_, ok := interface{}(new(xt.CSPAT00700_현물_정정_주문_질의값)).(lb.I질의값)
	lb.F테스트_참임(t, ok)
}

func TestCSPAT00700_현물_정정_주문(t *testing.T) {
	t.Parallel()

	if xt.F서버_구분() == xt.P서버_실거래 ||
		!F금일_한국증시_개장() ||
		!mt.F한국증시_정규_거래_시간임() {
		t.SkipNow()
	}

	소켓SUB_실시간 := lb.F확인2(nano.NewNano소켓SUB(xt.F주소_실시간()))
	lb.F대기(lb.P1초)

	lb.F테스트_에러없음(t, F주문_응답_실시간_정보_구독())

	const 반복_횟수 = 10
	const 수량 = int64(5)
	const 수량_전량_취소주문 = int64(0)

	종목 := lb.New종목("069500", "KODEX 200", lb.P시장구분_ETF)

	하한가, ok := 하한가_맵[종목.G코드()]
	lb.F테스트_참임(t, ok, "하한가를 찾을 수 없음. %v", 종목.G코드())

	가격_정상주문 := 하한가
	최소_호가단위, 에러 := F최소_호가단위by종목(종목)
	lb.F테스트_에러없음(t, 에러)

	계좌번호, 에러 := F계좌_번호(0)
	lb.F테스트_에러없음(t, 에러)

	//계좌_상세명, 에러 := F계좌_상세명(계좌번호)
	//lb.F확인(에러)
	//lb.F테스트_거짓임(t, strings.Contains(계좌_상세명, "선물옵션")) // 현물 계좌이어야 함.

	질의값 := xt.NewCSPAT00600_현물_정상_주문_질의값()
	질의값.M계좌번호 = 계좌번호
	질의값.M종목코드 = 종목.G코드()
	질의값.M주문수량 = 수량
	질의값.M주문단가 = 가격_정상주문 // 시장가 주문 시 가격은 무조건 '0'을 입력해야 함.
	질의값.M매도_매수_구분 = lb.P매수
	질의값.M호가유형 = lb.P호가_지정가
	질의값.M주문조건 = lb.P주문조건_없음 // 모의투자에서는 IOC, FOK를 사용할 수 없음.
	질의값.M신용거래_구분 = xt.P신용거래_해당없음
	질의값.M대출일 = time.Time{} // 신용주문이 아닐 경우는 NewCSPAT00600InBlock1()에서 공백문자로 바꿔줌.

	정상주문_응답값, 에러 := TrCSPAT00600_현물_정상주문(질의값)
	lb.F테스트_에러없음(t, 에러)
	lb.F테스트_참임(t, 정상주문_응답값.M응답2.M주문번호 > 0, 정상주문_응답값.M응답2.M주문번호)

	lb.F대기(lb.P100밀리초)

	원주문번호 := 정상주문_응답값.M응답2.M주문번호

	질의값_정정주문 := xt.NewCSPAT00700_현물_정정_주문_질의값()
	질의값_정정주문.M구분 = xt.TR주문
	질의값_정정주문.M코드 = xt.TR현물_정정_주문_CSPAT00700
	질의값_정정주문.M원주문번호 = 원주문번호
	질의값_정정주문.M계좌번호 = 계좌번호
	질의값_정정주문.M종목코드 = 종목.G코드()
	질의값_정정주문.M주문수량 = 수량
	질의값_정정주문.M호가유형 = lb.P호가_지정가
	질의값_정정주문.M주문조건 = lb.P주문조건_없음
	질의값_정정주문.M주문단가 = 가격_정상주문

	// 정정 주문 TR 실행
	for i := 0; i < 반복_횟수; i++ {
		switch 질의값_정정주문.M주문단가 {
		case 가격_정상주문, 가격_정상주문 + 최소_호가단위:
			질의값_정정주문.M주문단가 += 최소_호가단위
		case 가격_정상주문 + (2 * 최소_호가단위):
			질의값_정정주문.M주문단가 -= 최소_호가단위
		default:
			panic(lb.New에러("예상하지 못한 값 : '%v'", 질의값_정정주문.M주문단가))
		}

		정정주문_응답값, 에러 := TrCSPAT00700_현물_정정주문(질의값_정정주문)
		lb.F테스트_에러없음(t, 에러)
		lb.F테스트_참임(t, 정정주문_응답값.M응답2.M주문번호 > 0, 정정주문_응답값.M응답2.M주문번호)
		lb.F테스트_같음(t, 정정주문_응답값.M응답2.M모_주문번호, 정상주문_응답값.M응답2.M주문번호)
		lb.F테스트_같음(t, 정정주문_응답값.M응답1.M원_주문번호, 원주문번호)

		원주문번호 = 정정주문_응답값.M응답2.M주문번호
		질의값_정정주문.M원주문번호 = 원주문번호

		lb.F대기(lb.P100밀리초)
	}

	// 전량 취소
	질의값_취소주문 := lb.New질의값_취소_주문()
	질의값_취소주문.M구분 = xt.TR주문
	질의값_취소주문.M코드 = xt.TR현물_취소_주문_CSPAT00800
	질의값_취소주문.M원주문번호 = 원주문번호
	질의값_취소주문.M계좌번호 = 계좌번호
	질의값_취소주문.M종목코드 = 종목.G코드()
	질의값_취소주문.M주문수량 = 수량_전량_취소주문

	취소주문_응답값, 에러 := TrCSPAT00800_현물_취소주문(질의값_취소주문)
	lb.F테스트_에러없음(t, 에러)
	lb.F테스트_참임(t, 취소주문_응답값.M응답2.M주문번호 > 0, 취소주문_응답값.M응답2.M주문번호)

	lb.F대기(lb.P100밀리초)

	// 취소 주문 확인
	취소_주문_접수, 취소_주문_처리 := false, false

	for {
		바이트_변환_모음, 에러 := 소켓SUB_실시간.G수신()
		lb.F테스트_에러없음(t, 에러)

		실시간_정보, ok := lb.F확인2(바이트_변환_모음.S해석기(xt.F바이트_변환값_해석).G해석값(0)).(*xt.S현물_주문_응답_실시간_정보)

		switch {
		case !ok:
			continue
		case 실시간_정보.M원_주문번호 != 원주문번호:
			continue
		}

		switch 실시간_정보.RT코드 {
		case xt.RT현물_주문_거부_SC4:
			lb.F문자열_출력("취소 주문 거부됨 : '%v'", 정상주문_응답값.M응답2.M주문번호)
			t.FailNow()
		case xt.RT현물_주문_체결_SC1, xt.RT현물_주문_정정_SC2:
			lb.F문자열_출력("예상하지 못한 TR코드 : '%v'", 실시간_정보.RT코드)
			t.FailNow()
		case xt.RT현물_주문_접수_SC0:
			취소_주문_접수 = true
		case xt.RT현물_주문_취소_SC3:
			취소_주문_처리 = true
		}

		if 취소_주문_접수 && 취소_주문_처리 {
			break
		}
	}
}
